#!/usr/bin/env python3
"""
Test script to create sample Hindi and Kannada documents and test end-to-end processing
"""
import sys
import asyncio
from pathlib import Path
from docx import Document

# Add src directory to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.document_processor import DocumentProcessor
from src.models.ai_models import AIModelManager, DocumentAnalyzer

def create_test_documents():
    """Create test DOCX files with Hindi and Kannada content"""
    
    # Create Hindi test document
    hindi_doc = Document()
    hindi_doc.add_heading('‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º', 0)
    
    hindi_content = [
        '‡§Ø‡§π ‡§è‡§ï ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§π‡•à‡•§ ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∞‡§æ‡§ú‡§ß‡§æ‡§®‡•Ä ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§π‡•à‡•§',
        '‡§≠‡§æ‡§∞‡§§ ‡§è‡§ï ‡§µ‡§ø‡§µ‡§ø‡§ß‡§§‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§¶‡•á‡§∂ ‡§π‡•à‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§®‡•á‡§ï ‡§≠‡§æ‡§∑‡§æ‡§è‡§Å ‡§¨‡•ã‡§≤‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§',
        '‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•Ä ‡§∞‡§æ‡§ú‡§≠‡§æ‡§∑‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ø‡§π ‡§¶‡•á‡§µ‡§®‡§æ‡§ó‡§∞‡•Ä ‡§≤‡§ø‡§™‡§ø ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§',
        '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ: ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§®‡§ø‡§≠‡§æ‡§§‡•Ä ‡§π‡•à‡•§',
        '‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§∞‡§§ ‡§®‡•á ‡§Ö‡§≠‡•Ç‡§§‡§™‡•Ç‡§∞‡•ç‡§µ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡•Ä ‡§π‡•à‡•§'
    ]
    
    for content in hindi_content:
        hindi_doc.add_paragraph(content)
    
    hindi_doc.save('test_hindi.docx')
    print("‚úÖ Created test_hindi.docx")
    
    # Create Kannada test document
    kannada_doc = Document()
    kannada_doc.add_heading('‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤æ ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü', 0)
    
    kannada_content = [
        '‡≤á‡≤¶‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤æ ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü‡•§ ‡≤á‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≤∞‡≥ç‡≤®‡≤æ‡≤ü‡≤ï ‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø‡≤¶ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø ‡≤á‡≤¶‡≥Ü‡•§',
        '‡≤ï‡≤∞‡≥ç‡≤®‡≤æ‡≤ü‡≤ï ‡≤¶‡≤ï‡≥ç‡≤∑‡≤ø‡≤£ ‡≤≠‡≤æ‡≤∞‡≤§‡≤¶ ‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤∞‡≤æ‡≤ú‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü‡•§ ‡≤¨‡≥Ü‡≤Ç‡≤ó‡≤≥‡≥Ç‡≤∞‡≥Å ‡≤á‡≤¶‡≤∞ ‡≤∞‡≤æ‡≤ú‡≤ß‡≤æ‡≤®‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü‡•§',
        '‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤í‡≤Ç‡≤¶‡≥Å ‡≤¶‡≥ç‡≤∞‡≤æ‡≤µ‡≤ø‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤á‡≤¶‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≤‡≤ø‡≤™‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤≤‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü‡•§',
        '‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£‡≤¶ ‡≤Æ‡≤π‡≤§‡≥ç‡≤µ: ‡≤∂‡≤ø‡≤ï‡≥ç‡≤∑‡≤£‡≤µ‡≥Å ‡≤µ‡≥ç‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø‡≤§‡≥ç‡≤µ ‡≤Ö‡≤≠‡≤ø‡≤µ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤™‡≤æ‡≤§‡≥ç‡≤∞ ‡≤µ‡≤π‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü‡•§',
        '‡≤§‡≤Ç‡≤§‡≥ç‡≤∞‡≤ú‡≥ç‡≤û‡≤æ‡≤® ‡≤ï‡≥ç‡≤∑‡≥á‡≤§‡≥ç‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤≠‡≤æ‡≤∞‡≤§‡≤µ‡≥Å ‡≤Ö‡≤™‡≤æ‡≤∞ ‡≤™‡≥ç‡≤∞‡≤ó‡≤§‡≤ø ‡≤∏‡≤æ‡≤ß‡≤ø‡≤∏‡≤ø‡≤¶‡≥Ü‡•§'
    ]
    
    for content in kannada_content:
        kannada_doc.add_paragraph(content)
    
    kannada_doc.save('test_kannada.docx')
    print("‚úÖ Created test_kannada.docx")
    
    # Create mixed language document
    mixed_doc = Document()
    mixed_doc.add_heading('Multi-Language Test Document / ‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£', 0)
    
    mixed_content = [
        'This document contains multiple Indian languages.',
        '‡§π‡§ø‡§Ç‡§¶‡•Ä: ‡§Ø‡§π ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§π‡•à‡•§',
        '‡≤ï‡≤®‡≥ç‡≤®‡≤°: ‡≤á‡≤¶‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤° ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø ‡≤µ‡≤æ‡≤ï‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü‡•§',
        'English: This demonstrates multilingual document processing.',
        '‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§∂‡•ç‡§≤‡•ã‡§ï: ‡§∏‡§∞‡•ç‡§µ‡•á ‡§≠‡§µ‡§®‡•ç‡§§‡•Å ‡§∏‡•Å‡§ñ‡§ø‡§®‡§É ‡§∏‡§∞‡•ç‡§µ‡•á ‡§∏‡§®‡•ç‡§§‡•Å ‡§®‡§ø‡§∞‡§æ‡§Æ‡§Ø‡§æ‡§É‡•§'
    ]
    
    for content in mixed_content:
        mixed_doc.add_paragraph(content)
    
    mixed_doc.save('test_mixed.docx')
    print("‚úÖ Created test_mixed.docx")

async def test_document_processing():
    """Test the complete document processing pipeline"""
    print("\n" + "=" * 60)
    print("TESTING DOCUMENT PROCESSING PIPELINE")
    print("=" * 60)
    
    try:
        # Initialize document processor
        processor = DocumentProcessor()
        print("‚úÖ DocumentProcessor initialized")
        
        # Test files
        test_files = [
            'test_hindi.docx',
            'test_kannada.docx', 
            'test_mixed.docx'
        ]
        
        results = {}
        
        for filename in test_files:
            if Path(filename).exists():
                print(f"\nüìÑ Processing {filename}...")
                
                try:
                    # Process document
                    processed_doc = await processor.process_document(filename)
                    
                    # Get statistics
                    stats = processor.get_document_stats(processed_doc)
                    
                    print(f"   ‚úÖ Success: {len(processed_doc.elements)} elements extracted")
                    print(f"   üìä Languages detected: {stats['languages']}")
                    print(f"   üìà Element types: {stats['element_types']}")
                    print(f"   üíØ Average confidence: {stats['avg_confidence']:.2f}")
                    
                    # Store results for summary testing
                    results[filename] = processed_doc
                    
                    # Print first few elements for verification
                    print(f"   üìù Sample elements:")
                    for i, elem in enumerate(processed_doc.elements[:3]):
                        print(f"      {i+1}. [{elem.language}] {elem.text[:100]}...")
                    
                except Exception as e:
                    print(f"   ‚ùå Error: {e}")
                    
            else:
                print(f"‚ùå File not found: {filename}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå Failed to initialize processor: {e}")
        return {}

async def test_summarization(processed_docs):
    """Test AI summarization for Indian language documents"""
    print("\n" + "=" * 60)
    print("TESTING AI SUMMARIZATION")
    print("=" * 60)
    
    try:
        # Initialize AI models
        print("üß† Initializing AI models...")
        ai_models = AIModelManager()
        analyzer = DocumentAnalyzer(ai_models)
        print("‚úÖ AI models initialized")
        
        for filename, processed_doc in processed_docs.items():
            print(f"\nüìù Generating summary for {filename}...")
            
            try:
                # Generate summary
                summary_result = await analyzer.generate_document_summary(
                    processed_doc.elements,
                    summary_length='medium',
                    dual_language=True
                )
                
                print(f"   ‚úÖ Summary generated successfully!")
                
                if isinstance(summary_result, dict):
                    if 'summary' in summary_result:
                        print(f"   üìã Summary: {summary_result['summary'][:200]}...")
                    if 'english_summary' in summary_result:
                        print(f"   üá¨üáß English: {summary_result['english_summary'][:200]}...")
                    if 'original_language' in summary_result:
                        print(f"   üåê Language: {summary_result['original_language']}")
                else:
                    print(f"   üìã Summary: {summary_result[:200]}...")
                    
            except Exception as e:
                print(f"   ‚ùå Summarization failed: {e}")
    
    except Exception as e:
        print(f"‚ùå Failed to initialize AI models: {e}")

async def main():
    """Main test function"""
    print("üß™ POLYDOC END-TO-END TESTING")
    print("Testing Hindi and Kannada document processing and summarization")
    
    # Create test documents
    print("\nüìÅ Creating test documents...")
    create_test_documents()
    
    # Test document processing
    processed_docs = await test_document_processing()
    
    # Test summarization if we have processed documents
    if processed_docs:
        await test_summarization(processed_docs)
    
    print("\n" + "=" * 60)
    print("‚úÖ END-TO-END TESTING COMPLETED")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
